// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model user{
//   id Int @id @default(autoincrement()) 
//   firstName String @db.VarChar(50)
//   middleName String @db.VarChar(50)
//   lastName String @db.VarChar(50)
//   mobile String @db.VarChar(15)
//   email String @db.VarChar(50)
//   passwordHash String @db.VarChar(32)
//   registeredAr DateTime @default(now()) @db.Timestamp(0)
//   lastlogin DateTime @default(now()) @db.Timestamp(0) @updatedAt
//   intro String
//   prfile String
//   post post?
    

// }

model User {
  id Int @id @default(autoincrement()) 
  firstName String @db.VarChar(50)
  middleName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  mobile String @db.VarChar(15)
  email String @db.VarChar(50)
  passwordHash String @db.VarChar(32)
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  lastlogin DateTime @default(now()) @db.Timestamp(0) @updatedAt
  intro String
  prfile String
  post Post?
 
  
}

model Post {
  id Int @id @default(autoincrement())
  authorId Int @unique
  title String @db.VarChar(50)
  metaTitle String @db.VarChar(50)
  slug String @db.VarChar(15)
  summary String  @db.VarChar(50)
  published String @db.VarChar(32)
  content String @db.VarChar(33)
  createAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  publishedAT DateTime @default(now()) @db.Timestamp(0) @updatedAt
  user User @relation(fields: [authorId],references: [id],onDelete: Restrict,onUpdate:Cascade)
  post_comment post_comment?
  post_meta post_meta?
  post_category post_category[]
  post_tag post_tag[]
   
}

model post_comment{
  id Int @id @default(autoincrement()) 
  postId Int  @unique
  title String @db.VarChar(50)
  published String @db.VarChar(32)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  content String
 
  post Post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)

}


model post_meta{
  id Int @id @default(autoincrement())
  postId Int @unique 
  key String @db.VarChar(200)
  content String @db.VarChar(30)
 
  post Post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)

}

model Category{
  postid Int @id @default(autoincrement()) 
  title  String @db.VarChar(300)
  metaTitle String @db.VarChar(200)
  slug String @db.VarChar(200)
  user_id  Int @unique
  post_categor post_category @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    

  
}

model post_category{
   id Int @id @default(autoincrement()) 
   user_id Int 
  categoryId  String @db.VarChar(200) 
  post Post @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
   
  category Category?
   

}

model tag{
  id Int @id @default(autoincrement()) 
  title  String @db.VarChar(300)
  metaTitle String @db.VarChar(200)
  slug String @db.VarChar(200)
  user_id  Int @unique
   post_tag post_tag @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)
    
}

model post_tag{
  id Int @id @default(autoincrement()) 
  tagId Int @unique
  tag_Id String @db.VarChar(200)
  post Post @relation(fields: [tagId],references: [id],onDelete: Restrict,onUpdate: Cascade)
  tag tag?
  
}







enum index{
  namea
  age
} 